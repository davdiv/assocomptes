var klass = require("hsp/klass");
var promise = require("noder-js/promise");
var formatDate = require("../dates/format").date;
var editable = require("../components/editable.hsp.js");
var identityCard = require("../components/person/identityCard.hsp.js");
var editIdentityCard = require("../components/person/editIdentityCard.hsp.js");
var personName = require("../components/person/name.hsp.js");
var peopleMgr = require("../peopleMgr");

var Ctrl = klass({
    attributes: {
        page: {
            type: "object",
            binding: "1-way"
        }
    },
    onSave: function (event) {
        var page = this.page;
        var res = event.returnValue = promise.done.thenSync(peopleMgr.saveIdentity.bind(peopleMgr, page.editedIdentity));
        res.thenSync(function (res) {
            page.params.person = res.id;
            page.setUrl("/people/" + res.id);
        });
    },
    onRefresh : function(event) {
        event.returnValue = peopleMgr.refreshIdentity(this.page.params.person);
    },
    onCancel : function(page, event) {
        if (!this.page.savedIdentity) {
            this.page.remove();
        }
    }
});

# template iconTemplate(page)
    <#personName data="{page.savedIdentity}" />
# /template

# template viewer(data)
    <div>
    <#identityCard data="{data}" />
    </div>
# /template

# template template using c:Ctrl
    {let page = c.page}
    <div class="container-fluid">
        {let identity = page.savedIdentity}
        <h2><span class="glyphicon glyphicon-chevron-right"></span> Identité</h2>
        <#editable
            onSave="{c.onSave(event)}"
            onRefresh="{c.onRefresh(event)}"
            onCancel="{c.onCancel(event)}"
            savedData="{page.savedIdentity}"
            editedData="{page.editedIdentity}"
            savingData="{page.savingIdentity}"
            viewer="{viewer}"
            editor="{editIdentityCard}"
            currentView="{page.identityView}"/>
        <hr>
        {if page.savedIdentity}
        <h2><span class="glyphicon glyphicon-chevron-right"></span> Inscription</h2>
        {if !page.registration}
            <p>{identity.firstName||"Cette personne"} n'appartient à aucune famille inscrite.</p>
            <p><a href="/registrations/new?person={encodeURIComponent(page.params.person)}" class="btn btn-primary">Nouvelle inscription</a></p>
        {/if}
        <hr>
        <h2><span class="glyphicon glyphicon-chevron-right"></span> Dernières visites</h2>
        <p><a href="/visits/new?person={encodeURIComponent(page.params.person)}" class="btn btn-primary">Nouvelle visite</a></p>
        {if !page.visits || page.visits.length == 0}
            <p>{identity.firstName||"Cette personne"} n'a aucune visite enregistrée.</p>
        {else}
            <table class="table table-striped table-hover">
            <thead><tr><th>Date</th><th>Inscriptions concernées</th><th>Montant dû</th><th>Montant réglé</th></tr></thead>
            <tbody>
                {foreach visit in page.visits}
                    <tr><td>{formatDate(visit.date)}</td><td></td><td></td><td></td></tr>
                {/foreach}
            </tbody>
            </table>
        {/if}
        {/if}
    </div>
# /template

// this wrapper template is needed because of a bug in hashspace
# template wrapperTemplate(page)
   <#template page="{page}" />
# /template

var createIdentity = function (query) {
    var res = {};
    res.firstName = query.firstName;
    res.lastName = query.lastName;
    return res;
};

module.exports = {
    template : wrapperTemplate,
    iconTemplate : iconTemplate,
    init: function (page) {
        if (page.params.person == "new") {
            page.savedIdentity = null;
            page.editedIdentity = createIdentity(page.query);
            page.identityView = "edit";

            page.setQuery({id: new Date().getTime()});
        } else {
            page.savedIdentity = peopleMgr.getIdentity(page.params.person);
        }
    }
};
