<script>
var klass = require("hsp/klass");
var promise = require("noder-js/promise");
var editable = require("../../components/editable.hsp.js");
var isPromise = require("../../utils/isPromise");
</script>

<template id="template" args="controller">
    <div class="container-fluid">
        <#editable
            onSave="{controller.onUserSave($event)}"
            onRefresh="{controller.onUserRefresh($event)}"
            onCancel="{controller.onUserCancel($event)}"
            savedData="{controller.savedData}"
            editedData="{controller.editedData}"
            savingData="{controller.savingData}"
            currentView="{controller.currentView}"
            viewer="{controller.viewerTemplate}"
            editor="{controller.editorTemplate}"
            canSave="{controller.cache.canSave()}"
            />
    </div>
    {if controller.actionTemplate && controller.savedData && !isPromise(controller.savedData)}
        <#controller.actionTemplate controller="{controller}"/>
    {/if}
</template>

<script>
module.exports = klass({
    template: template,
    viewerTemplate: null,
    editorTemplate: null,
    actionTemplate: null,
    cache : null,
    init : function(page) {
        this.page = page;
        var id = page.params.id;
        if (id === "new") {
            this.savedData = null;
            this.editedData = this.createData(page.query);
            this.currentView = "edit";

            page.query = {
                id : new Date().getTime()
            };
            page.updateUrl();
        } else {
            this.savedData = this.loadData(id);
            this.editedData = null;
        }
    },
    createData : function(query) {
        return {};
    },
    loadData : function(id) {
        if (this.cache) {
            return this.cache.getItemContent(id);
        } else {
            return {
                id : id
            };
        }
    },
    saveData : function(data) {
        if (this.cache) {
            return this.cache.saveItemContent(data);
        } else {
            return data;
        }
    },
    refreshData : function(id) {
        if (this.cache) {
            return this.cache.refreshItemContent(id);
        } else {
            return this.loadData(id);
        }
    },
    onUserRefresh : function(event) {
        event.returnValue = this.refreshData(this.page.params.id);
    },
    onUserSave : function(event) {
        var page = this.page;
        var res = event.returnValue = promise.done.thenSync(this.saveData.bind(this, this.editedData));
        res.thenSync(function(res) {
            page.params.id = res.id;
            page.query = {};
            page.updateUrl();
        });
    },
    onUserCancel : function(event) {
        var hasChanges = this.hasChanges();
        if (hasChanges) {
            var willCancelChanges = confirm("Êtes-vous sûr(e) de vouloir annuler les modifications?");
            if (!willCancelChanges) {
                event.preventDefault = true;
                return;
            }
        }
        if (!this.savedData) {
            this.page.$dispose();
        }
    },
    hasChanges: function () {
        // TODO: compare in more details the edited and saved data
        return !!this.editedData;
    },
    close : function() {
        var hasChanges = this.hasChanges();
        var willClose = true;
        if (hasChanges) {
            willClose = confirm("Cette page peut contenir des données non enregistrées qui seront perdues si elle est fermée.\nÊtes-vous sûr(e) de vouloir la fermer?");
        }
        return willClose;
    }
});
</script>
