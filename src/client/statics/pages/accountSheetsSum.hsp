<script>
var klass = require("hsp/klass");
var vis = require("vis");
var dateField = require("../display/dates/field.hsp.js");
var viewDate = require("../display/dates/view.hsp.js");
var formatCurrency = require("../utils/formatCurrency");
var resolvePromise = require("../utils/resolvePromise");
var isPromise = require("../utils/isPromise");
var accountSheetsMgr = require("../persistence/accountSheets");
var serialization = require("../serialization");
var notMetaData = serialization.isNotMetaData;
var forEach = require("../utils/forEach");
var showError = require("../display/errors/view.hsp.js");
var createCashboxDetails = require("../validation/cashboxDetails/create");
var recomputeCashboxDetails = require("../validation/cashboxDetails/recompute");
var addCashboxDetails = require("../validation/cashboxDetails/add");
var viewCashboxDetails = require("../display/cashboxDetails/view.hsp.js");
var graph = require("../widgets/graph.hsp.js");
var formatDate = require("../display/dates/utils/format");
var formatNumber = function (value) {
    return formatCurrency(value).replace(/\./,",").replace(/ €$/,"");
};
var exportFile = require("../exportFile");
var tsvFile = require("../tsvFile");
var createAccountingEntries = require("../createAccountingEntries");
var defaultCategories = require("../defaultCategories");
var defaultAccountingEntriesConfig = require("../defaultAccountingEntriesConfig");
var multiAutoComplete = require("../widgets/multiAutoComplete.hsp.js");
var regExpField = require("../widgets/regExpField.hsp.js");
var tagSuggestions = require("../display/accountSheets/utils/tagSuggestions");

var detailsRegExp = /^(.+)\s+\(.+\)\s*$/
var readFromGroupsConfig = function (groupsConfig, item) {
    var res = groupsConfig[item];
    if (!res) {
        var match = detailsRegExp.exec(item);
        if (match) {
            res = match[1];
        } else {
            res = "Autre";
        }
    }
    return res;
};

var sheetsColumns = [ {
    title : "Tags",
    getValue : function (sheet) {
        return sheet.tags ? sheet.tags.join(", ") : "";
    }
}, {
    title : "Date de début",
    getValue : function (sheet) {
        return formatDate(sheet.beginDate);
    }
}, {
    title : "Date de fin",
    getValue : function (sheet) {
        return formatDate(sheet.endDate);
    }
}, {
    title : "Somme",
    getValue : function (sheet) {
        return formatNumber(sheet.sumAmount);
    }
}, {
    title : "Différence",
    getValue : function (sheet) {
        return formatNumber(sheet.difference);
    }
}, {
    title : "Montant réel",
    getValue : function (sheet) {
        return formatNumber(sheet.realAmount);
    }
} ];

var groupedByMonthColumns = [ {
    title : "Tags",
    getValue : function (line) {
        return line.tags ? line.tags.join(", ") : "";
    }
}, {
    title : "Date",
    getValue : function (line) {
        return formatDate(line.date);
    }
}, {
    title : "Désignation",
    getValue : function (line) {
        return line.item;
    }
}, {
    title : "Nombre d'opérations",
    getValue : function (line) {
        return formatNumber(line.number);
    }
}, {
    title : "Montant",
    getValue : function (line) {
        return formatNumber(line.amount);
    }
} ];

var isTagSelected = function (selectedTags, tag) {
    return selectedTags ? !! selectedTags[tag] : false;
};

var sortByDate = function (l1, l2) {
    return l1.date < l2.date ? 1 : -1;
};

var sortByEndDate = function (l1, l2) {
    return l1.endDate < l2.endDate ? 1 : -1;
};

var sortByAmount = function (l1, l2) {
    return l2.total - l1.total;
};

var add = function (object, amount) {
    if (amount > 0) {
        object.income += amount;
    } else if (amount < 0) {
        object.outcome -= amount;
    } else {
        return;
    }
    object.total += amount;
    object.number++;
};

var includeIn = function(object, line) {
    var item = line.item;
    var amount = line.amount;
    if (!amount) {
        return;
    }
    var objectItem = object[item];
    if (objectItem == null) {
        objectItem = object[item] = {
            item: item,
            income: 0,
            outcome: 0,
            number: 0,
            total: 0
        };
    }
    add(objectItem, amount);
};

var objectValues = function (object) {
    return Object.keys(object).filter(notMetaData).map(function (name) {
        return object[name];
    });
};
</script>

<template id="accountingEntriesConfig" args="config">
    <div class="form-horizontal">
        <div class="row form-group">
            <label class="col-sm-3 control-label">Exercice comptable</label>
            <div class="col-sm-5">
                <input type="text" value="{config.accountingYear}" class="form-control input-sm"/>
            </div>
        </div>
        <div class="row form-group">
            <label class="col-sm-3 control-label">Catégories ajustables (si différence de montant)</label>
            <div class="col-sm-5">
                <#multiAutoComplete
                    values="{config.changeableCategories}"
                    onEnter="{tagSuggestions.onEnter($event)}"
                />
            </div>
        </div>
        <div class="row form-group">
            <label class="col-sm-3 control-label">Catégories regroupables</label>
            <div class="col-sm-5">
                <#multiAutoComplete
                    values="{config.groupableCategories}"
                    onEnter="{tagSuggestions.onEnter($event)}"
                />
            </div>
        </div>
        <div class="row form-group">
            <label class="col-sm-3 control-label">Tags utilisés</label>
            <div class="col-sm-5">
                <#multiAutoComplete
                    values="{config.relevantTags}"
                    onComputeSuggestions="{tagSuggestions.onComputeSuggestions($event)}"
                    onEnter="{tagSuggestions.onEnter($event)}"
                />
            </div>
        </div>
        <div class="row form-group">
            <label class="col-sm-3 control-label">Libellé pour les opérations regroupées</label>
            <div class="col-sm-5">
                <input type="text" value="{config.groupLabel}" class="form-control input-sm"/>
            </div>
        </div>
        <div class="row form-group">
            <label class="col-sm-3 control-label">Journal</label>
            <div class="col-sm-5">
                <input type="text" value="{config.journal}" class="form-control input-sm"/>
            </div>
        </div>
        {foreach category in Object.keys(config.categoriesAccounts).filter(notMetaData)}
            <div class="row form-group">
                <label class="col-sm-3 control-label">Numéro de compte général pour la catégorie <em>{category}</em></label>
                <div class="col-sm-5">
                    <input type="text" value="{config.categoriesAccounts[category]}" class="form-control input-sm"/>
                </div>
            </div>
        {/foreach}
        {foreach tag in config.relevantTags}
            <div class="row form-group">
                <label class="col-sm-3 control-label">Numéro de compte analytique pour le tag <em>{tag}</em></label>
                <div class="col-sm-5">
                    <input type="text" value="{config.tagsAnalyticAccounts[tag]}" class="form-control input-sm"/>
                </div>
            </div>
        {/foreach}
        <div class="row form-group">
            <label class="col-sm-3 control-label">Numéro de compte général pour la caisse</label>
            <div class="col-sm-5">
                <input type="text" value="{config.cashboxAccount}" class="form-control input-sm"/>
            </div>
        </div>
    </div>
</template>

<template id="showByMonth" args="months, items">
    <table class="table">
    <tbody>
        <tr>
        <th>Mois</th>
        {if items.length > 1}
        {foreach item in items}
            <th>{item.item}</th>
        {/foreach}
        {/if}
        <th>Total</th>
        </tr>
    {foreach month in months}
        <tr>
            <td>{month.key}</td>
            {if items.length > 1}
            {foreach item in items}
                <td>{formatCurrency(month.groups[item.item] || 0)}</td>
            {/foreach}
            {/if}
            <td>{formatCurrency(month.amount)}</td>
        </tr>
    {/foreach}
    </tbody>
    </table>
</template>

<template id="showByWeek" args="weeks, items">
    <table class="table">
    <tbody>
        <tr>
        <th>Semaine</th>
        <th>Date</th>
        {if items.length > 1}
        {foreach item in items}
            <th>{item.item}</th>
        {/foreach}
        {/if}
        <th>Total</th>
        </tr>
    {foreach week in weeks}
        <tr>
            <td>{week.number}</td>
            <td><#viewDate data="{week.date}"/></td>
            {if items.length > 1}
            {foreach item in items}
                <td>{formatCurrency(week.groups[item.item] || 0)}</td>
            {/foreach}
            {/if}
            <td>{formatCurrency(week.amount)}</td>
        </tr>
    {/foreach}
    </tbody>
    </table>
</template>

<template id="showSummary" args="items, total, groupsConfig">
    <table class="table">
    <tbody>
        <tr>
        <th>Désignation</th>
        {if groupsConfig}
        <th>Catégorie</th>
        {/if}
        <th>Nombre</th>
        <th>Sorties</th>
        <th>Entrées</th>
        <th>Total</th>
        </tr>
    {foreach item in items}
        <tr>
            <td>{item.item}</td>
            {if groupsConfig}
              <td><input type="text" value="{groupsConfig[item.item]}" placeholder="{readFromGroupsConfig(groupsConfig, item.item)}" class="form-control input-sm"/></td>
            {/if}
            <td>{item.number}</td>
            <td>{formatCurrency(item.outcome)}</td>
            <td>{formatCurrency(item.income)}</td>
            <td>{formatCurrency(item.total)}</td>
        </tr>
    {/foreach}
        <tr>
            <th>Total</th>
            {if groupsConfig}
              <th></th>
            {/if}
            <th>{total.number}</th>
            <th>{formatCurrency(total.outcome)}</th>
            <th>{formatCurrency(total.income)}</th>
            <th>{formatCurrency(total.total)}</th>
        </tr>
    </tbody>
    </table>
</template>

<template id="showLineDetails" args="controller">
    {let results=controller.results}
    <table class="table">
    <tbody>
        <tr>
        <th>Tags</th>
        <th>Date</th>
        <th>Désignation</th>
        <th>Montant</th>
        </tr>
    {foreach line in results.lines}
        <tr>
            <td>
                <a href="/accountSheets/{line.id}"><span class="glyphicon glyphicon-list-alt"></span></a>
                {foreach tag in line.tags} <span class="badge">{tag}</span>{/foreach}
            </td>
            <td><#viewDate data="{line.date}"/></td>
            <td>{line.item}</td>
            <td>{formatCurrency(line.amount)}</td>
        </tr>
    {/foreach}
        <tr>
            <th colspan="3">Total ({results.lines.length} mouvements de caisse)</th>
            <th>{formatCurrency(results.total.total)}</th>
        </tr>
    </tbody>
    </table>
</template>

<template id="showGroupedByMonth" args="controller">
    {let results=controller.results}
    <table class="table">
    <tbody>
        <tr>
        <th>Tags</th>
        <th>Date</th>
        <th>Désignation</th>
        <th>Nombre d'opérations</th>
        <th>Montant</th>
        </tr>
    {foreach line in results.groupedOperationsByMonth}
        <tr>
            <td>
                {foreach tag in line.tags} <span class="badge">{tag}</span>{/foreach}
            </td>
            <td><#viewDate data="{line.date}"/></td>
            <td>{line.item}</td>
            <td>{line.number}</td>
            <td>{formatCurrency(line.amount)}</td>
        </tr>
    {/foreach}
        <tr>
            <th colspan="3">Total ({results.groupedOperationsByMonth.length} opérations)</th>
            <th>{formatCurrency(results.total.total)}</th>
        </tr>
    </tbody>
    </table>
</template>

<template id="showSheetDetails" args="controller">
    {let results=controller.results}
    <table class="table">
    <tbody>
        <tr>
        <th>Tags</th>
        <th>Date de début</th>
        <th>Date de fin</th>
        <th>Somme</th>
        <th>Différence</th>
        <th>Montant réel</th>
        </tr>
    {foreach sheet in results.sheets}
        <tr>
            <td>
                <a href="/accountSheets/{sheet.id}"><span class="glyphicon glyphicon-list-alt"></span></a>
                {foreach tag in sheet.tags} <span class="badge">{tag}</span>{/foreach}
            </td>
            <td><#viewDate data="{sheet.beginDate}"/></td>
            <td><#viewDate data="{sheet.endDate}"/></td>
            <td>{formatCurrency(sheet.sumAmount)}</td>
            <td>{formatCurrency(sheet.difference)}</td>
            <td>{formatCurrency(sheet.realAmount)}</td>
        </tr>
    {/foreach}
        <tr>
            <th colspan="5">Total ({results.sheets.length} feuilles de compte)</th>
            <th>{formatCurrency(results.total.total)}</th>
        </tr>
    </tbody>
    </table>
</template>

<template id="displayResults" args="controller">
    {let results = controller.results}
    {if controller.filterTags || results.tags.length}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Ecritures comptables</h3>
    <p><a href="#" onclick="{controller.toggleAccountingEntriesConfig($event)}">{if controller.showAccountingEntriesConfig}Masquer les détails{else}Afficher les détails{/if}</a> <button title="Exporter les écritures comptables" class="btn btn-default btn-sm" onclick="{controller.exportAccountingEntries()}"><span class="glyphicon glyphicon-save"></span></button></p>
    {if controller.showAccountingEntriesConfig}
        <#accountingEntriesConfig config="{controller.accountingEntriesConfig}"/>
    {/if}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Filtres</h3>
    <div class="btn-group">
        <button onclick="{controller.clearTags()}" class="btn btn-default {controller.filterTags ? '' : 'active'}">Aucun filtre</button>
        {foreach tag in results.tags}
            <button onclick="{controller.clickTag(tag)}" class="btn btn-default {isTagSelected(controller.filterTags, tag) ? 'active' : ''}">{tag}</button>
        {/foreach}
    </div>
    {/if}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Graphe par semaine</h3>
    <p><a href="#" onclick="{controller.toggleWeekGraph($event)}">{if controller.showWeekGraph}Masquer les détails{else}Afficher les détails{/if}</a></p>
    {if controller.showWeekGraph}
        <#graph items="{results.weekGraph.items}" groups="{results.weekGraph.groups}" options="{results.weekGraph.options}"/>
    {/if}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Résumé simplifié</h3>
        <#showSummary items="{results.simplifiedItems}" total="{results.total}"/>
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Résumé</h3>
        <#showSummary items="{results.items}" total="{results.total}" groupsConfig="{controller.simplifiedSummaryConfig}"/>
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Détails par semaine</h3>
    <p><a href="#" onclick="{controller.toggleWeekDetails($event)}">{if controller.showWeekDetails}Masquer les détails{else}Afficher les détails{/if}</a> <button title="Exporter les détails au format TSV" class="btn btn-default btn-sm" onclick="{controller.saveWeeks()}"><span class="glyphicon glyphicon-save"></span></button></p>
    {if controller.showWeekDetails}
        <#showByWeek weeks="{results.weeks}" items="{results.simplifiedItems}"/>
    {/if}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Détails par mois</h3>
    <p><a href="#" onclick="{controller.toggleMonthDetails($event)}">{if controller.showMonthDetails}Masquer les détails{else}Afficher les détails{/if}</a> <button title="Exporter les détails au format TSV" class="btn btn-default btn-sm" onclick="{controller.saveMonths()}"><span class="glyphicon glyphicon-save"></span></button></p>
    {if controller.showMonthDetails}
        <#showByMonth months="{results.months}" items="{results.simplifiedItems}"/>
    {/if}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Opérations groupées par mois</h3>
    <p><a href="#" onclick="{controller.toggleGroupedByMonth($event)}">{if controller.showGroupedByMonth}Masquer les détails{else}Afficher les détails{/if}</a> <button title="Exporter les détails au format TSV" class="btn btn-default btn-sm" onclick="{controller.saveGroupedByMonth()}"><span class="glyphicon glyphicon-save"></span></button></p>
    {if controller.showGroupedByMonth}
        <#showGroupedByMonth controller="{controller}"/>
    {/if}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Feuilles de compte</h3>
    <p><a href="#" onclick="{controller.toggleSheetDetails($event)}">{if controller.showSheetDetails}Masquer les détails{else}Afficher les détails{/if}</a> <button title="Exporter les détails au format TSV" class="btn btn-default btn-sm" onclick="{controller.saveAccountSheets()}"><span class="glyphicon glyphicon-save"></span></button></p>
    {if controller.showSheetDetails}
        <#showSheetDetails controller="{controller}"/>
    {/if}
    <h3><span class="glyphicon glyphicon-chevron-right"></span> Mouvements de caisse</h3>
    <p><a href="#" onclick="{controller.toggleLineDetails($event)}">{if controller.showLineDetails}Masquer les détails{else}Afficher les détails{/if}</a></p>
    {if controller.showLineDetails}
        <#showLineDetails controller="{controller}"/>
    {/if}
    {if results.cashboxDetails}
        <h3><span class="glyphicon glyphicon-chevron-right"></span> Contenu de la caisse</h3>
        <p><a href="#" onclick="{controller.toggleCashboxDetails($event)}">{if controller.showCashboxDetails}Masquer les détails{else}Afficher les détails{/if}</a></p>
        {if controller.showCashboxDetails}
            <#viewCashboxDetails data="{results.cashboxDetails}"/>
        {/if}
    {/if}
</template>

<template id="displaySearch" args="controller">
    {let query = controller.query}
    <div class="form-horizontal">
        <div class="form-group">
            <label class="col-sm-2 control-label">Date de début</label>
            <div class="col-sm-3">
                <#dateField value="{query.beginDate}"/>
             </div>
            <label class="col-sm-2 control-label">Date de fin</label>
            <div class="col-sm-3">
                <#dateField value="{query.endDate}"/>
            </div>
        </div>
        <div class="block-container right">
            <div class="block">
                <button onclick="{controller.search()}" class="btn btn-primary">Rechercher</button>
            </div>
        </div>
    </div>
</template>

<template id="template" args="controller">
    <div class="container-fluid">
        <h3><span class="glyphicon glyphicon-chevron-right"></span> Recherche</h3>
        {if controller.results}
            <p><a href="#" onclick="{controller.toggleSearch($event)}">{if controller.showSearch}Masquer la zone de recherche{else}Afficher la zone de recherche{/if}</a></p>
        {/if}
        {if !controller.results || controller.showSearch}
            <#displaySearch controller="{controller}" />
        {/if}
    </div>
    <div class="container-fluid">
    {if controller.results}
        {if isPromise(controller.results)}
            {if controller.resultsError}
                <#showError error="{controller.resultsError}" />
            {else}
                <span class="spinner"></span> Veuillez patienter...
            {/if}
        {else}
            <#displayResults controller="{controller}"/>
        {/if}
    {/if}
    </div>
</template>

<script>
module.exports = klass({
    template : template,
    init: function () {
        this.query = {};
        this.simplifiedSummaryConfig = defaultCategories();
        this.accountingEntriesConfig = defaultAccountingEntriesConfig();
        this.filterTags = null;
        this.showAccountingEntriesConfig = false;
        this.showSearch = false;
        this.showLineDetails = false;
        this.showSheetDetails = false;
        this.showCashboxDetails = false;
        this.showWeekDetails = false;
        this.showMonthDetails = false;
        this.showWeekGraph = false;
        this.showGroupedByMonth = false;
    },
    toggleAccountingEntriesConfig: function (event) {
        event.preventDefault();
        this.showAccountingEntriesConfig = !this.showAccountingEntriesConfig;
    },
    toggleWeekGraph: function (event) {
        event.preventDefault();
        this.showWeekGraph = !this.showWeekGraph;
    },
    toggleGroupedByMonth: function (event) {
        event.preventDefault();
        this.showGroupedByMonth = !this.showGroupedByMonth;
    },
    toggleWeekDetails: function (event) {
        event.preventDefault();
        this.showWeekDetails = !this.showWeekDetails;
    },
    toggleMonthDetails: function (event) {
        event.preventDefault();
        this.showMonthDetails = !this.showMonthDetails;
    },
    toggleLineDetails: function (event) {
        event.preventDefault();
        this.showLineDetails = !this.showLineDetails;
    },
    toggleSheetDetails: function (event) {
        event.preventDefault();
        this.showSheetDetails = !this.showSheetDetails;
    },
    toggleCashboxDetails: function (event) {
        event.preventDefault();
        this.showCashboxDetails = !this.showCashboxDetails;
    },
    toggleSearch: function (event) {
        event.preventDefault();
        this.showSearch = !this.showSearch;
    },
    saveAccountSheets: function () {
        exportFile([tsvFile(sheetsColumns, this.results.sheets)], "Comptes.tsv", {type: "text/tab-separated-values"});
    },
    saveWeeks: function () {
        var weeksColumns = [
            {
               title : "Semaine",
               getValue : function (week) {
                   return week.number;
               }
            }, {
               title : "Date",
               getValue : function (week) {
                   return formatDate(week.date);
               }
            }
        ];
        if (this.results.simplifiedItems.length > 1) {
            forEach(this.results.simplifiedItems, function (item) {
                weeksColumns.push({
                   title : item.item,
                   getValue : function (week) {
                       return formatNumber(week.groups[item.item] || 0);
                   }
                });
            });
        }
        weeksColumns.push({
           title : "Total",
           getValue : function (week) {
               return formatNumber(week.amount);
           }
        });
        exportFile([tsvFile(weeksColumns, this.results.weeks)], "Comptes.tsv", {type: "text/tab-separated-values"});
    },
    saveMonths: function () {
        var monthsColumns = [
            {
               title : "Mois",
               getValue : function (month) {
                   return month.key;
               }
            }
        ];
        if (this.results.simplifiedItems.length > 1) {
            forEach(this.results.simplifiedItems,function (item) {
                monthsColumns.push({
                   title : item.item,
                   getValue : function (month) {
                       return formatNumber(month.groups[item.item] || 0);
                   }
                });
            });
        }
        monthsColumns.push({
           title : "Total",
           getValue : function (month) {
               return formatNumber(month.amount);
           }
        });
        exportFile([tsvFile(monthsColumns, this.results.months)], "Comptes.tsv", {type: "text/tab-separated-values"});
    },
    saveGroupedByMonth : function () {
        exportFile([tsvFile(groupedByMonthColumns, this.results.groupedOperationsByMonth)], "Comptes.tsv", {type: "text/tab-separated-values"});
    },
    clearTags: function () {
        this.filterTags = null;
        this.results = this.computeResults(this.results.query, this.results.allSheets);
    },
    clickTag : function (tag) {
        if (this.filterTags && this.filterTags[tag]) {
            delete this.filterTags[tag];
            if (Object.keys(this.filterTags).filter(notMetaData).length == 0) {
                this.filterTags = null;
            }
        } else {
            if (!this.filterTags) {
                this.filterTags = {};
            }
            this.filterTags[tag] = true;
        }
        this.results = this.computeResults(this.results.query, this.results.allSheets);
    },
    computeResults : function (query, allSheets) {
        var self = this;
        var filterTags = this.filterTags ? Object.keys(this.filterTags).filter(notMetaData) : null;
        var lines = [];
        var sheets = [];
        var tags = {};
        var items = {};
        var cashboxDetails = createCashboxDetails();
        var total = {
            income: 0,
            outcome: 0,
            number: 0,
            total: 0
        };
        forEach(allSheets, function(sheet) {
            var sheetTags = {};
            forEach(sheet.tags, function (tag) {
                tags[tag] = true;
                sheetTags[tag] = true;
            });
            var filterOut = !!filterTags;
            forEach(filterTags, function (filterTag) {
                if (sheetTags[filterTag]) {
                    filterOut = false;
                }
            });
            if (filterOut) {
                return;
            }
            if (cashboxDetails) {
                if (sheet.realAmountDetails) {
                    addCashboxDetails(cashboxDetails, sheet.realAmountDetails);
                } else {
                    cashboxDetails = null;
                }
            }
            var beginDate = null;
            var endDate = null;
            forEach(sheet.days, function (day) {
                if (!beginDate || day.date < beginDate) {
                    beginDate = day.date;
                }
                if (!endDate || day.date > endDate) {
                    endDate = day.date;
                }
                forEach(day.lines, function (line) {
                    lines.push({
                        amount: line.amount,
                        item: line.item,
                        date: day.date,
                        id: sheet.id,
                        tags: sheet.tags
                    });
                    includeIn(items, line);
                    add(total, line.amount);
                })
            });
            var difference = sheet.realAmount - sheet.sumAmount;
            if (difference !== 0) {
                // add the difference as a line
                var line = {
                    amount: difference,
                    item: "Différence",
                    date: endDate,
                    id: sheet.id,
                    tags: sheet.tags
                };
                lines.push(line);
                includeIn(items, line);
                add(total, difference)
            }
            sheets.push({
                beginDate: beginDate,
                endDate: endDate,
                id: sheet.id,
                realAmount: sheet.realAmount,
                sumAmount: sheet.sumAmount,
                difference: difference,
                tags: sheet.tags
            });
        });
        if (cashboxDetails) {
            recomputeCashboxDetails(cashboxDetails);
        }
        lines.sort(sortByDate);
        sheets.sort(sortByEndDate);
        var itemsArray = objectValues(items).sort(sortByAmount);
        var weeks = this.computeByWeek(lines, this.simplifiedSummaryConfig);
        var simplifiedItems = this.computeSimplifiedItems(this.simplifiedSummaryConfig, itemsArray)
        return {
            query: query,
            tags: Object.keys(tags),
            allSheets: allSheets,
            sheets: sheets,
            lines: lines,
            cashboxDetails: cashboxDetails,
            items: itemsArray,
            simplifiedItems : simplifiedItems,
            weeks: weeks,
            months: this.computeByMonth(lines, this.simplifiedSummaryConfig),
            groupedOperationsByMonth: this.groupByMonth(lines, this.simplifiedSummaryConfig),
            weekGraph: this.buildWeekGraph(weeks, simplifiedItems),
            total: total
        }
    },
    buildWeekGraph : function (weeks, simplifiedItems) {
        var groups = new vis.DataSet();
        var items = new vis.DataSet();
        forEach(simplifiedItems, function (item) {
            groups.add({
                id: item.item,
                content: item.item
            });
        });
        forEach(weeks, function (week) {
            forEach(simplifiedItems, function (item) {
                items.add({
                    x: week.date,
                    y: week.groups[item.item] || 0,
                    group: item.item
                });
            });
        });
        return {
            groups: groups,
            items: items,
            options: {
                stack: true,
                style:'bar',
                legend:simplifiedItems.length > 1
            }
        };
    },
    computeByWeek : function (lines, groupsConfig) {
        var weeksArray = [];
        var lastWeek = null;
        var millisecondsInDay = 1000 * 60 * 60 * 24;

        var getWeek = function (date) {
            var daysDiff = Math.round(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) / millisecondsInDay);
            var weekNumber = Math.floor((daysDiff - date.getDay()) / 7);
            if (!lastWeek || lastWeek.number !== weekNumber) {
                while (lastWeek && lastWeek.number - 1 > weekNumber) {
                    lastWeek = {
                        number: lastWeek.number - 1,
                        date: new Date(lastWeek.date.getFullYear(), lastWeek.date.getMonth(), lastWeek.date.getDate() - 7),
                        groups: {},
                        amount: 0
                    };
                    weeksArray.push(lastWeek);
                }
                lastWeek = {
                    number: weekNumber,
                    // Take the last day of the week:
                    date: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 6 - date.getDay()),
                    groups: {},
                    amount: 0
                };
                weeksArray.push(lastWeek);
            }
            return lastWeek;
        };

        forEach(lines, function(line) {
            var week = getWeek(line.date);
            week.amount += line.amount;
            var groupName = readFromGroupsConfig(groupsConfig, line.item);
            var curGroupValue = week.groups[groupName] || 0;
            week.groups[groupName] = curGroupValue + line.amount;
        });
        return weeksArray;
    },
    computeByMonth : function (lines, groupsConfig) {
        var monthsArray = [];
        var lastMonth = null;
        var millisecondsInDay = 1000 * 60 * 60 * 24;

        var getMonth = function (date) {
            var month = date.getMonth() + 1;
            var monthKey = [month < 10 ? "0" : "", month, "/", date.getFullYear()].join("");
            if (!lastMonth || lastMonth.key !== monthKey) {
                lastMonth = {
                    key: monthKey,
                    groups: {},
                    amount: 0
                };
                monthsArray.push(lastMonth);
            }
            return lastMonth;
        };

        forEach(lines, function(line) {
            var month = getMonth(line.date);
            month.amount += line.amount;
            var groupName = readFromGroupsConfig(groupsConfig, line.item);
            var curGroupValue = month.groups[groupName] || 0;
            month.groups[groupName] = curGroupValue + line.amount;
        });
        return monthsArray;
    },
    groupByMonth : function (lines, groupsConfig) {
        var groupedOperationsMap = {};
        var operations = [];
        var relevantTags = this.accountingEntriesConfig.relevantTags;
        var groupableCategories = this.accountingEntriesConfig.groupableCategories;

        var getMonthKey = function (date) {
            var month = date.getMonth() + 1;
            var monthKey = [month < 10 ? "0" : "", month, "/", date.getFullYear()].join("");
            return monthKey;
        };

        forEach(lines, function(line) {
            var curLineRelevantTags = (line.tags || []).filter(function (tag) {
                return relevantTags.indexOf(tag) > -1;
            });
            var relevantTag = curLineRelevantTags.length === 1 ? " " + curLineRelevantTags[0] : "";
            var groupName = readFromGroupsConfig(groupsConfig, line.item);
            var isDifference = line.item === "Différence";
            var isGroupable = groupableCategories.indexOf(groupName) > -1;
            if (isDifference || isGroupable) {
                var monthKey = getMonthKey(line.date);
                var item = groupName + relevantTag + " " + monthKey;
                if (isDifference) {
                    curLineRelevantTags = [];
                    item = line.item;
                }
                var group = groupedOperationsMap[item];
                if (!group) {
                    group = groupedOperationsMap[item] = {
                        amount: 0,
                        date: line.date,
                        item: item,
                        tags: curLineRelevantTags.length === 1 ? curLineRelevantTags : [],
                        number: 0
                    };
                    operations.push(group);
                }
                group.amount += line.amount;
                group.number ++;
            } else {
                operations.push({
                    amount: line.amount,
                    date: line.date,
                    item: line.item,
                    tags: curLineRelevantTags,
                    number: 1
                });
            }
        });
        return operations;
    },
    computeSimplifiedItems : function(groupsConfig, items) {
        var simplifiedItems = {};
        forEach(items, function (curItem) {
            var groupName = readFromGroupsConfig(groupsConfig, curItem.item);
            var group = simplifiedItems[groupName];
            if (!group) {
                group = simplifiedItems[groupName] = {
                    item: groupName,
                    income: 0,
                    outcome: 0,
                    number: 0,
                    total: 0
                };
            }
            group.income += curItem.income;
            group.outcome += curItem.outcome;
            group.number += curItem.number;
            group.total += curItem.total;
        });
        return objectValues(simplifiedItems).sort(sortByAmount);
    },
    search : function() {
        var query = serialization.clone(this.query);
        var dbQuery = {};
        if (query.beginDate || query.endDate) {
            var dateCriteria = dbQuery["current.days.date"] = {};
            if (query.beginDate) {
                dateCriteria["$gte"] = query.beginDate;
            }
            if (query.endDate) {
                var endDate = new Date(query.endDate.getTime());
                endDate.setDate(endDate.getDate()+1);
                dateCriteria["$lt"] = endDate;
            }
        }
        this.results = accountSheetsMgr.search(dbQuery).thenSync(this.computeResults.bind(this, query));
        resolvePromise(this, "results","resultsError");
    },
    exportAccountingEntries : function () {
        exportFile([createAccountingEntries(this.results.allSheets, readFromGroupsConfig.bind(null, this.simplifiedSummaryConfig), this.accountingEntriesConfig)], "Ecritures comptables.txt", {type: "text/plain"});
    }
});
</script>
