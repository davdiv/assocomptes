var hsp = require("hsp/rt");
var klass = require("hsp/klass");
var personRef = require("./personRef.hsp.js");
var personName = require("../person/name.hsp.js");
var singleAutoComplete = require("../../widgets/singleAutoComplete.hsp.js");
var dragUtils = require("../../dragUtils");
var peopleMgr = require("../../peopleMgr");

var extractPersonId = function (dataTransfer) {
    var url = dragUtils.extractURL(dataTransfer);
    if (url === true) {
        return true;
    } else if (url && /\/people\/(\w+)($|\?|#)/.test(url)) {
        return RegExp.$1;
    }
    return null;
};

var Ctrl = klass({
    attributes: {
        value: {
            type:"object",
            binding: "2-way"
        },
        onchange: {
            type:"callback"
        }
    },
    onComputeSuggestions: function(event) {
        event.returnValue = peopleMgr.search(event.text);
    },
    onChooseSuggestion: function (event) {
        this.value = event.suggestion;
        this.callOnChange();
    },
    callOnChange: function () {
        var sendEvent = {
            value: this.value
        };
        this.onchange(sendEvent);
        this.value = sendEvent.value;
    },
    onDragOver: function(event) {
        var dataTransfer = event.dataTransfer;
        var dragging = extractPersonId(dataTransfer);
        if (dragging) {
            this.dragging = dragging;
            dataTransfer.dropEffect = "copy";
            event.preventDefault();
        }
    },
    onDragLeave: function (event) {
        this.dragging = null;
    },
    onDrop: function (event) {
        event.preventDefault();
        this.dragging = null;
        var dragging = extractPersonId(event.dataTransfer);
        if (dragging && dragging !== true) {
            this.value = dragging;
            this.callOnChange();
        }
    },
    onRemoveSuggestion: function (event) {
        event.preventDefault = true;
        event.value = null;
        this.value = null;
        this.callOnChange();
    }
});

# template personRefName(data)
    <#personRef template="{personName}" data="{data}"/>
# /template

# template personField using c:Ctrl
    <span ondragover="{c.onDragOver(event)}" ondragleave="{c.onDragLeave(event)}" ondrop="{c.onDrop(event)}">
        {if c.dragging}
            <#singleAutoComplete
                class="dragging"
                value="{c.dragging !== true ? c.dragging : null}"
                displaySuggestion="{personRefName}"
                displaySelection="{personRef}"
            />
        {else}
            <#singleAutoComplete
                value="{c.value}"
                onComputeSuggestions="{c.onComputeSuggestions(event)}"
                onChooseSuggestion="{c.onChooseSuggestion(event)}"
                onRemoveSuggestion="{c.onRemoveSuggestion(event)}"
                displaySuggestion="{personRefName}"
                displaySelection="{personRef}"
            />
        {/if}
    </span>
# /template

module.exports = personField;
