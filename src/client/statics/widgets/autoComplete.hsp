var klass = require("hsp/klass");
var hsp = require("hsp/rt");
var promiseUtils = require("../promiseUtils");
var isPromise = promiseUtils.isPromise;

# template defaultDisplaySuggestion(data)
    {data}
# /template

var AutoCompleteController = klass({
    attributes : {
        "class" : {
            binding : "1-way",
            type : "string"
        },
        value : {
            binding : "2-way",
            type : "string"
        },
        onComputeSuggestions : {
            type : "callback"
        },
        onChooseSuggestion : {
            type : "callback"
        },
        onEnter : {
            type : "callback"
        },
        onfocus : {
            type : "callback"
        },
        onblur : {
            type : "callback"
        },
        displaySuggestion : {
            type : "object"
        }
    },
    $init : function () {
        if (!this.displaySuggestion) {
            this.displaySuggestion = defaultDisplaySuggestion;
        }
        this.focused = false;
        this.open = false;
        this.suggestions = null;
        this.selectedSuggestion = -1;
    },
    onSuggestionsChange : function() {
        promiseUtils.resolvePromise(this,"suggestions","suggestionsError");
    },
    changeSelectedSuggestion : function (diff) {
        if (!this.open || !this.suggestions || !this.suggestions.length) {
            return;
        }
        var newValue = this.selectedSuggestion + diff;
        if (newValue < -1) {
            newValue = -1;
        } else if (newValue >= this.suggestions.length) {
            newValue = this.suggestions.length - 1;
        }
        this.selectedSuggestion = newValue;
    },
    onKeyDown : function (event) {
        if (event.keyCode == 9) {
            // tab, let's close the dropdown right now, before the focus changes
            this.open = false;
            hsp.refresh(); // make it happen immediately
        } else if (event.keyCode == 38 || event.keyCode == 40) {
            event.preventDefault();
            this.changeSelectedSuggestion(event.keyCode - 39);
        } else if (event.keyCode == 13) {
            if (this.open && this.selectedSuggestion != -1) {
                this.chooseSuggestion(this.suggestions[this.selectedSuggestion], event);
            } else {
                this.enter(event);
            }
        }
    },
    chooseSuggestion : function (suggestion) {
        this.open = false;
        var event = {
            preventDefault: false,
            suggestion : suggestion,
            text : this.value
        };
        this.onChooseSuggestion(event);
        if (!event.preventDefault) {
            event.text = event.suggestion != null ? event.suggestion + "" : "" ;
        }
        this.value = event.text;
    },
    enter : function (domEvent) {
        domEvent.preventDefault();
        this.open = false;
        var event = {
            text : this.value
        };
        this.onEnter(event);
        this.value = event.text;
    },
    onType : function (event) {
        var value = event.target.value;
        if (value == "") {
            this.open = false;
        } else {
            var event = {
                text : value,
                returnValue : null
            };
            this.onComputeSuggestions(event);
            this.selectedSuggestion = -1;
            this.suggestions = event.returnValue;
            this.open = true;
        }
    },
    onFocus : function (event) {
        this.focused = true;
        this.onfocus(event);
    },
    onBlur : function (event) {
        this.focused = false;
        this.open = false;
        this.onblur(event);
    },
    preventDefault : function (event) {
        event.preventDefault();
    },
    onSuggestionMouseOver : function (index) {
        this.selectedSuggestion = index;
    }
});

# template autoComplete using c:AutoCompleteController
    <div class="{'dropdown','open':c.open}">
        <input
            type="text"
            class="{c.class}"
            value="{c.value}"
            oninput="{c.onType(event)}"
            onkeydown="{c.onKeyDown(event)}"
            onfocus="{c.onFocus(event)}"
            onblur="{c.onBlur(event)}"/>
    {if c.open}
        <ul class="dropdown-menu" onmousedown="{c.preventDefault(event)}" onclick="{c.preventDefault(event)}">
            {if isPromise(c.suggestions)}
                {if c.suggestionsError}
                    <li class="disabled"><a href="#">{c.suggestionsError}</a></li>
                {else}
                    <li><a href="#">Recherche en cours... <span class="spinner"/></a></li>
                {/if}
            {else if !c.suggestions || !c.suggestions.length}
                <li class="disabled"><a href="#">Pas de suggestion</a></li>
            {else}
                {foreach index,suggestion in c.suggestions}
                    <li class="{'active':index == c.selectedSuggestion}">
                        <a href="#" onmouseover="{c.onSuggestionMouseOver(index)}" onclick="{c.chooseSuggestion(suggestion, event)}"><#c.displaySuggestion data="{suggestion}"/></a>
                    </li>
                {/foreach}
            {/if}
        </ul>
    {/if}
    </div>
# /template

module.exports = autoComplete;
