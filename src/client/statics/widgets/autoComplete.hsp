var klass = require("hsp/klass");
var hsp = require("hsp/rt");

# template defaultDisplaySuggestion(data)
	{data.label}
# /template

var AutoCompleteController = klass({
	attributes: {
		"class": {
			binding: "1-way",
			type: "string"
		},
		value: {
			binding: "2-way",
			type: "object"
		},
		onComputeSuggestions: {
			type: "callback"
		},
		onChooseSuggestion: {
			type: "callback"
		},
		displaySuggestion: {
			type: "object", // in fact, we expect a template
			defaultValue: defaultDisplaySuggestion
		}
	},
	$init: function() {
		this.focused = false;
		this.open = false;
		this.waitingSuggestions = null;
		this.suggestions = [];
		this.selectedSuggestion = -1;
		
		this.internalValue = this.value ? this.value : "";

		this.field = null; // defined when there is an event

	},
	onValueChange : function () {
		this.internalValue = this.value ? this.value : "";
	},
	onInternalValueChange : function() {
		this.value = this.internalValue;
	},
	changeSelectedSuggestion: function (diff) {
		if (!this.open || !this.suggestions || ! this.suggestions.length) {
			return;
		}
		var newValue = this.selectedSuggestion + diff;
		if (newValue < -1) {
			newValue = -1;
		} else if (newValue >= this.suggestions.length) {
			newValue = this.suggestions.length -1;
		}
		this.selectedSuggestion = newValue;
	},
	onKeyDown: function (event) {
		this.field = event.target;
		if (event.keyCode == 9) {
			// tab, let's close the dropdown right now, before the focus changes
			this.open = false;
			hsp.refresh(); // make it happen immediately
		} else if (event.keyCode == 38 || event.keyCode == 40) {
			event.preventDefault();
			this.changeSelectedSuggestion(event.keyCode - 39);
		} else if (event.keyCode == 13) {
			if (this.open && this.selectedSuggestion != -1) {
				event.preventDefault();
				this.chooseSuggestion(this.selectedSuggestion, this.suggestions[this.selectedSuggestion]); 
			}
		}
	},
	chooseSuggestion: function (index, suggestion) {
		this.open = false;
		var event = {
			index: index,
			suggestion: suggestion,
			text: suggestion.label || ""
		};
		this.onChooseSuggestion(event);
		this.value = event.text;
	},
	processResponse: function (response) {
		response = response || {};
		this.waitingSuggestions = null;
		this.suggestions = response.suggestions || [];
		this.selectedSuggestion = -1;
	},
	processPromisedResponse: function (promise) {
		var self = this;
		self.waitingSuggestions = promise;
		self.suggestions = [];
		self.selectedSuggestion = -1;
		var checkAndProcessResponse = function(response) {
			if (promise == self.waitingSuggestions) {
				self.processResponse(response);
			}
			checkAndProcessResponse = null;
			self = null;
			promise = null;
		};
		promise.then(checkAndProcessResponse, function () {
			checkAndProcessResponse(null);
		});
	},
	onType: function (event) {
		var value = event.target.value;
		if (value == "") {
			this.open = false;
		} else {
			var event = {
				text: value,
				response: null
			};
			this.onComputeSuggestions(event);
			var response = event.response;
			if (response && response.then) {
				this.processPromisedResponse(response);
			} else {
				this.processResponse(response);
			}
			this.open = true;
		}
	},
	onFocus: function () {
		this.focused = true;
	},
	onBlur: function () {
		this.focused = false;
		this.open = false;
	},
	onDropDownMouseDown: function (event) {
		event.preventDefault(); // prevent drop down items to be focused by
                                // click
	},
	onSuggestionMouseOver: function (index) {
		this.selectedSuggestion = index;
	}
});

var c; // because hashspace should not try and read the c variable...

# template autoComplete using c:AutoCompleteController
	<div class="{'dropdown','open':c.open}">
		<input 	type="text" 
				class="form-control {c.class}"
				value="{c.internalValue}"
				oninput="{c.onType(event)}"
				onkeydown="{c.onKeyDown(event)}"
				onfocus="{c.onFocus()}"
				onblur="{c.onBlur()}"/>
		{if c.open}
			<ul class="dropdown-menu" onmousedown="{c.onDropDownMouseDown(event)}">
				{foreach index,suggestion in c.suggestions}
					<li class="{'active':index == c.selectedSuggestion}">
						<a href="#" onmouseover="{c.onSuggestionMouseOver(index)}" onclick="{c.chooseSuggestion(index, suggestion)}"><#c.displaySuggestion data="{suggestion}"/></a>
					</li>
				{/foreach}
				{if c.waitingSuggestions}
					<li><a href="#">Recherche en cours... <span class="spinner"/></a></li>
				{else if c.suggestions.length == 0}
					<li class="disabled"><a href="#">Pas de suggestion</a></li>
				{/if}
			</ul>
		{/if}
	</div>
# /template

module.exports = autoComplete;
